// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace data.Migrations
{
    [DbContext(typeof(AutoDoDbContext))]
    [Migration("20250528131614_AddCommentToConsultant")]
    partial class AddCommentToConsultant
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Consultant", b =>
                {
                    b.Property<Guid>("ConsultantUuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ConsultantUuid");

                    b.Property<DateTime>("AvailabilityDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("AvailabilityDate");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<string>("CopyCI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CopyCI");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Email");

                    b.Property<DateTime>("ExpirationDateCI")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpirationDateCI");

                    b.Property<bool>("Intern")
                        .HasColumnType("bit")
                        .HasColumnName("Intern");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Phone");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Picture");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Surname");

                    b.Property<string>("enterprise")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Enterprise");

                    b.HasKey("ConsultantUuid");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Consultant", (string)null);
                });

            modelBuilder.Entity("Enterprise", b =>
                {
                    b.Property<Guid>("EnterpriseUuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EnterpriseUuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name");

                    b.HasKey("EnterpriseUuid");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Enterprise", (string)null);
                });

            modelBuilder.Entity("Keyword", b =>
                {
                    b.Property<Guid>("KeywordUuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("KeywordUuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name");

                    b.HasKey("KeywordUuid");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Keyword", (string)null);
                });

            modelBuilder.Entity("Matching", b =>
                {
                    b.Property<Guid>("MatchingUuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MatchingUuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Comment");

                    b.Property<Guid>("ProfileUuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RfpUuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("Score");

                    b.Property<string>("StatutMatching")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatchingUuid");

                    b.HasIndex("ProfileUuid");

                    b.HasIndex("RfpUuid", "ProfileUuid")
                        .IsUnique();

                    b.ToTable("Matching", (string)null);
                });

            modelBuilder.Entity("Profile", b =>
                {
                    b.Property<Guid>("ProfileUuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProfileUuid");

                    b.Property<string>("CV")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("CV");

                    b.Property<DateTime>("CVDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CVDate");

                    b.Property<Guid>("ConsultantUuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExperienceLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("JobTitle");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ratehour")
                        .HasColumnType("int")
                        .HasColumnName("Ratehour");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProfileUuid");

                    b.HasIndex("ConsultantUuid");

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("RFP", b =>
                {
                    b.Property<Guid>("RFPUuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RFPUuid");

                    b.Property<DateTime>("DeadlineDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeadlineDate");

                    b.Property<string>("DescriptionBrut")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DescriptionBrut");

                    b.Property<string>("ExperienceLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("JobTitle");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("PublicationDate");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Reference");

                    b.Property<string>("RfpPriority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RfpPriority");

                    b.Property<string>("RfpUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("RfpUrl");

                    b.PrimitiveCollection<string>("Skills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Workplace")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Workplace");

                    b.HasKey("RFPUuid");

                    b.ToTable("RFP", (string)null);
                });

            modelBuilder.Entity("Skill", b =>
                {
                    b.Property<Guid>("SkillUuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SkillUuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name");

                    b.HasKey("SkillUuid");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Skill", (string)null);
                });

            modelBuilder.Entity("Matching", b =>
                {
                    b.HasOne("Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RFP", "Rfp")
                        .WithMany()
                        .HasForeignKey("RfpUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Rfp");
                });

            modelBuilder.Entity("Profile", b =>
                {
                    b.HasOne("Consultant", "Consultant")
                        .WithMany("Profiles")
                        .HasForeignKey("ConsultantUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");
                });

            modelBuilder.Entity("Consultant", b =>
                {
                    b.Navigation("Profiles");
                });
#pragma warning restore 612, 618
        }
    }
}
